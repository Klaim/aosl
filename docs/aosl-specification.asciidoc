AOSL Specification 
==================
A. JoÃ«l Lamotte <klaim@artofsequence.org>
v1.0-draft
:doctype: book
:toc:
:numbered:

== General


=== Scope

. This document specifies the Art Of Sequence Language (AOSL) format. 
This is the specification for version 1.0 of AOSL.

. AOSL is a universal format for representing narratives implemented using digital plateforms. 
It's purpose is to be a bridge between tools (for authors, publishers and developers), 
interpreters (also called "players") in a variety of 

. The implementations following this specification are able to read, 
interpret and modify AOSL documents in an inter-operable way, 
which means that AOSL data read, interpreted and modified by one implementation can be read, 
interpreted and modified by another as long as both implementation apply the requirements of this document. 
Such implementations are called confirming implementations.
Therefore, the first requirement is to implement this specification.

=== Status of This Document

This is a working draft of the specification.

=== Dependencies

. The following referenced documents are indispensable for the application of this document. 
For dated references, only the edition cited applies. For undated references, 
the latest edition of the referenced document (including any amendments) applies.:

    - *DOM 4* specification : *"W3C DOM 4"* http://www.w3.org/TR/dom/
    - *URI* specification : *RFC 3986 - "Uniform Resource Identifier (URI): Generic Syntax"* - http://tools.ietf.org/html/rfc3986
    - Keywords ("must", "shall") specification: *RFC 2119 - "Key words for use in RFCs to Indicate Requirement Levels"* - http://www.ietf.org/rfc/rfc2119.txt

. The following referenced documents are indispensable for the understanding of the examples of this document:

    - *XML* specification : "Extensible Markup Language (XML) 1.0 (Fifth Edition)" - http://www.w3.org/TR/2008/REC-xml-20081126/
    - *XSD* specification: 
        - "XML Schema Part 1: Structures Second Edition" - http://www.w3.org/TR/xmlschema-1/
        - "XML Schema Part 2: Datatypes Second Edition" - http://www.w3.org/TR/xmlschema-2/
        - "XML Schema Part 0: Primer Second Edition" - http://www.w3.org/TR/xmlschema-0/

. The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", 
"MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.

. The AOSL format specifies requirement applied on data organized following the DOM Node Tree structure. 
AOSL data must be organized following the DOM Node Tree structure and must additionally follow 
the AOSL-specific requirements to be conformant.

. This specification expose data using XML schemes in examples. 
AOSL can be encoded within other data formats like JSON, YAML or BSON, but in this document we will exclusively use XML. 
XML helps clarify what is the type of which element of the DOM structure, which help documentation.
In the examples of this document using XML, we will assume (if not specified) that the XML code is extracted 
from a fictive document, which have the following root element definition (englobing the example code):
+
[source,xml]
----
<?xml version="1.0" encoding="utf-8" ?>

<sequence xmlns="artofsequence.org/aosl/1.0" ... " >

    <!-- Example Here -->

</sequence>
----
+
As specified in this XML sample, the XML namespace used is implicitely the AOSL XML namespace. 
This imply that all tags specific to AOSL are not prefixed in the examples.
    
. An XSD scheme file enforcing this specification for XML data is provided at http://artofsequence.org/aosl/1.0 
It can be used by tools to check the validity of AOSL data as XML.
In the examples of this document using XSD, we will assume (if not specified) that the XSD code is extracted 
from this XSD document, which have the following root element definition (englobing the example code):
+
[source,xml]
----
<xs:schema xmlns:aos="artofsequence.org/aosl/1.0"
            xmlns:xs="http://www.w3.org/2001/XMLSchema"
            attributeFormDefault="unqualified"
            elementFormDefault="qualified"
            targetNamespace="artofsequence.org/aosl/1.0"
            version="1.0"
            >
    
    <!-- Example Here -->

</xs:schema>
----
+
As specified in this XSD sample, *aos* is the XML namespace is used for xml tags specific AOSL.


=== Definitions

type::
    Specifiy the constraints and usage of data.
+
[WARNING]
====
Add an XML/XSD example here.
====

element::
    An instance of an type, implemented as a node in the DOM Node Tree.
    The constraints of the type are applied to the data stored by the element.
    An element can contain other elements if the constraints described by the type allows it.
+
[WARNING]
====
Add an XML example here.
====

attribute::
    Key-value property of an element with a semantic is defined by the type.
+
[WARNING]
====
Add an XML/XSD example here.
====
    
decimal-type::
    A native decimal type.
+
[NOTE]
====
In XSD, a decimal-type type could be implemented as a +xs:double+ or +xsd:decimal+ type.
In $$C++$$, a decimal-type could be implemented as a $$C++$$'s +double+ or +float+ type.
====

string-type::
    A type which can contain textual values, with or without additional constraints.
+
[NOTE]
====
In XSD, a string-type type could be implemented as a +xs:string+ or +xsd:anyURI+ type 
 (in case we want to add URI scheme constraints to the textual value).
In $$C++$$, a string-type could be implemented as a $$C++$$'s +std::string+ or +const char*+ type 
or a wrapper type around a +std::string+ which would add necessary constraints.
====
    

interpreter::
    The interpreter is the implementation that will read the AOSL data and apply it's semantic.
+
[NOTE]
====
Examples of interpreters implementation: 

    - an exporter converting AOSL data to another specific format;
    - a player embedded in a web page to interpret on-the-fly AOSL data and display the result to the reader;
    - a library interpreting the semantic of AOSL data and providing a description of the 
        interpreted state of the reading to the user code (for example to allow a preview in an editor,
        or as part of an implementation of player application).
====

=== Basic Types

==== unit_space

. +unit_space+ is a type containing values in spatial units.
. +unit_space+ must be implemented as a  decimal-type.
. +unit_space+ value must be interpreted as a distance from a relative value on an axis defined in a vectorial space.

[NOTE]
====
Possible XSD representation:
[source,xml]
----
<xs:simpleType name="unit_space" >
    <xs:restriction base="xs:double" />
</xs:simpleType>
----
====

==== unit_time

. +unit_time+ is a type representing values in time units.
. +unit_time+ must be implemented as a decimal-type.
. +unit_time+ value must be interpreted as standard seconds.

[NOTE]
====
Possible XSD representation:
[source,xml]
----
<xs:simpleType name="unit_time" >
    <xs:restriction base="xs:double" />
</xs:simpleType>
----
====


==== value_percent

. +value_percent+ is a type representing a ratio.
. +value_percent+ value must be specified using a number between 0 and 100 followed by a +%+ character.

[NOTE]
====
Possible XSD representation:
[source,xml]
----
<xs:simpleType name="value_percent" >
    <xs:restriction base="xs:string">
        <xs:pattern value="\d(.\d*)*%" />
    </xs:restriction>
</xs:simpleType>
----
====


==== angle

. +angle+ is a type representing a geometric angle.
. +angle+ must be implemented as a decimal-type.
. +angle+ value must be interpreted in Radian.

[NOTE]
====
Possible XSD representation:
[source,xml]
----
<xs:simpleType name="angle" >
    <xs:restriction base="xs:double" />
</xs:simpleType>
----
====




==== vector

. +vector+ is a type representing a geometric 3D vector.
+
NOTE: +vector+ is typically used to represent either a position in space (relative to the origin), or a translation or a direction.

. +vector+ must expose the following attributes:
+
|===
| *Attribute Name* | *Type* | *Default value* | *Semantic* 
| +x+ | +unit_space+ | 0.0 | Represents a distance on the X axis in 3D vectorial space. 
| +y+ | +unit_space+ | 0.0 | Represents a distance on the Y axis in 3D vectorial space. 
| +z+ | +unit_space+ | 0.0 | Represents a distance on the Z axis in 3D vectorial space. 
|===


[NOTE]
====
Possible XSD representation:
[source,xml]
----
<xs:complexType name="vector" >
    <xs:attribute name="x" type="aos:unit_space" default="0.0" />
    <xs:attribute name="y" type="aos:unit_space" default="0.0" />
    <xs:attribute name="z" type="aos:unit_space" default="0.0" />
</xs:complexType>

----
====

==== rotation

. +rotation+ is a type representing a geometric 3D rotation around an unspecified center.
+
NOTE: +rotation+ is typically used to represent either an orientation in space, or a rotation.

. +rotation+ must expose the following attributes:
+
|===
| *Attribute Name* | *Type* | *Default value* | *Semantic* 
| +yaw+   | +angle+ | 0.0 | Represents a rotation around the X axis in a 3D vectorial space. 
| +pitch+  | +angle+ | 0.0 | Represents a rotation around the Y axis in a 3D vectorial space. 
| +roll+     | +angle+ | 0.0 | Represents a rotation around the Z axis in a 3D vectorial space. 
|===

[NOTE]
====
Possible XSD representation:
[source,xml]
----
<xs:complexType name="rotation" >    
    <xs:attribute name="yaw"  type="aos:angle" default="0.0" />
    <xs:attribute name="pitch" type="aos:angle" default="0.0" />
    <xs:attribute name="roll"    type="aos:angle" default="0.0" />
</xs:complexType>

----
====


==== transformation

. +transformation+ is a type representing a geometric 3D transformation that can be applied to an object in space.

. +transformation+ is composed of the following elements which can appear in any order:
+
|===
| *Element Name*  | *Type*          | *Occurence*      | *Semantic*    
| +translation+       | +vector+        | Once or none.     | Represents a translation applied to the subject of the +transformation+. 
| +scale+              | +vector+        | Once or none.     | Represents an homotetie applied to the subject of the +transformation+. 
| +rotation+          | +vector+        | Once or none.     | Represents a rotation applied to the subject of the +transformation+, relative to the +origin+ point. 
| +origin+              | +vector+    | Once or none.     | Represents an homotetie applied to the subject of the +transformation+. 
|===

[NOTE]
====
Possible XSD representation:
[source,xml]
----

<xs:complexType name="transformation">
    <xs:all>
        <xs:element name="translation" type="aos:vector"    minOccurs="0"  maxOccurs="1" />
        <xs:element name="scale"        type="aos:vector"     minOccurs="0" maxOccurs="1" />
        <xs:element name="rotation"     type="aos:rotation"  minOccurs="0"  maxOccurs="1" />
        <xs:element name="origin"        type="aos:vector"     minOccurs="0" maxOccurs="1" />
    </xs:all>
</xs:complexType>

----
====


==== box

. +box+ is a type representing a geometric 3D box in space.

. +box+ is composed of the following elements which can appear in any order:
+
|===
| *Element Name*  | *Type*          | *Occurence*      | *Semantic*     
| +size+       | +vector+        | Once or none.    |
    Size of the box.
    Each one of the axes value gives the length of the corresponding edges of the box.
    If not provided, the default size should be determined by the implementation.
    In this case, if it is the ouput or input box of a graphic object, the default value is 100% of the resource size.  
| +transformation+              | +transformation+        | Once or none.  |
    Transformation defining the position, 
    orientation and scale factor of this box, 
    relative to the parent object or the canvas origin if no parent.  
|===

[NOTE]
====
Possible XSD representation:
[source,xml]
----

<xs:complexType name="box">
    <xs:all>
        <xs:element name="size" type="aos:vector" minOccurs="0" />
        <xs:element name="transformation" type="aos:transformation" minOccurs="0" />
    </xs:all>
</xs:complexType>

----
====


==== spatial_area

. +spatial_area+ is a type representing a 3D area.
+
WARNING: Needs a lot of clarifications...maybe just remove that type?

. +spatial_area+ must be implemented as a +vector+ and must expose +vector+'s interface.

[NOTE]
====
Possible XSD representation:
[source,xml]
----

<xs:complexType name="spatial_area">
    <xs:complexContent>
        <xs:extension base="aos:vector" />
    </xs:complexContent>
</xs:complexType>

----
====


==== source_uri

. +source_uri+ is a type representing the URI of a resource.
. +source_uri+ must be implemented as a string-type with the following additional constraints:
    - the string-type value must be conformant with the URI scheme specification (see [RFC-3986]).

[NOTE]
====
As specified in [RFC-3986] (see [dependencies]), an URI can be a local filesystem file address, 
an online URL or something else. It is volontarily unspecified here how it must be interpreted.
As with almost all the values represented in AOSL, the interpreter implementation will define 
(and provide to tools for preventive checking) it's own additional constraints. 
For example, XAOSL adds that the URI must be relative to some files internal to the 
XAOSL container file system. An interpreter in a web page might add a constraint forcing
all URIs to be URLs and use them as such to retrieve resources.
====
    
[NOTE]
====
Possible XSD representation:
[source,xml]
----

	<xs:simpleType name="source_uri">
		<xs:restriction base="xs:anyURI" />
	</xs:simpleType>

----
====




