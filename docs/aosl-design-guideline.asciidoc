= AOSL: Design Guidelines
A. JoÃ«l Lamotte <klaim@artofsequence.org>
:toc:

_**WARNING: This document is a work in progress and will evolve a lot until it becomes definitely useful for the community to use. Also please discuss it on the developers mailing list if necessary.**_

The purpose of this document is to be a reference for the community to understand the thinking behind the design decisions taken for AOSL.

'''

== 1. Problems & Solutions

AOSL is meant to solve a set of problems currently plaguing a lot of tools and formats that could otherwise have been used extensively already, but are not. 

Here is a list of things to solve, driving the design of AOSL:

=== 1.1. Correct Abstract Representation

Almost all formats currently available that represent some kind of digital sequence (and that are no based on time) have problems unleashing the power of digital platforms to the creators, either by limiting the kind of actions possible or by limiting the target platforms, or worse, by forcing the author to learn some programming skills before being able to really do what he originally wanted to do. In other domains, like graphics, audio and video, tools works with files that have the correct abstraction for the medium, solving almost all problems of limitations concerning that medium. An audio file can contain any kind of sound, an image can contain any kind of flat graphics, a video can contain any kind of animated content. This is not the case for digital sequences that are still very young way of telling stories.

A "correct" format is needed. To understand digital sequences, almost "scientific" understanding of what is a comics/manga, what is a powerpoint, what are the common points between paper comic books, webcomics, powerpoints, turbo-media and other similar structures. In fact that study has already been done, for example in his (comic) book "Understanding Comics" Scott McLoud explain clearly that the point of comics is only to diffuse a sequence of media. The important part, common and specific to all cited formats, is that the story gaps between each stages of the sequence (between each frame in a comic book for example) make the reader visualize internally everything that is not shown. This is the focus that make a comic book different than a movie. 

Digital media sequences are simply this idea: the reader control the reading by passing from one stage to the other of the sequence, with no time forced on it like in a video. 

AOSL is meant to represent exactly that, in a way that allow the creator of the sequence to use whatever he wants to fill the sequence with. That's why it's an abstract format: it describe how things should be in the sequence, what to see and what to hide and "when" in the sequence, without any notion of time.
Also, it don't assume anything about the flow of the story provided and, to be complete, allow to exploit the digital platform specificities: turing completeness.

=== 1.2. Extendable

Most format available to describe sequences are either totally closed or not thought for extension.

AOSL solve this by providing extension points inside it's global structure, but also allow the language itself to be extended. It is thought to be customized by player implementers.

=== 1.3. Inter-operable

This point is mostly the same limitation than the extendability problem, but in worse: most formats are hard to even interpret by other tools and makes any work to process sequence representations very hard from the beginning to the end of writting the tool.

Having tools that can work together is the basis to allow people sharing and making the domain better.

AOSL is designed in a way that makes inter-operability a non-problem. 
It worth noting that AOSL is not meant to be read and written by humans, it is meant to be read and written by (human friendly) tools.

=== 1.4. Specializable

This point can be associated to the extendability problem in some ways but is the other way around: closed or non-extendable formats force the user to limit themselfs to a limited set of publication platforms. On the other side, a fully abstract representation of any medium will tend to be hard to use in some specific contexts. For example, web pages are better read with a smartphone when optimized for smartphones. It is possible to have a web page be readable for both big screens and little tactile screens, but it gives hard constraints in both cases on what can be in the page and how it can be represented.

AOSL allow both generalisation and specialisation of the representation of a digital sequence. The digital sequence can be written in a general way first, then some additions might be added to make sure it works well with some specific players. In the same way, an AOSL based digital sequence can be written specifically for a specific platform, and still be readable with another player, thanks to the common grounds sets by the language.

One goal of the AOSL design (which is not achieved yet in AOSL 1.0) is that one AOSL file should be able to represent different versions of the same story, depending on the interpreter capabilities.

'''

== 2. Design

Here are the key design decisions that have been taken to assure that those problems are solved:

=== 2.1. Not Based On Time

This is the most important decision to understand why the format is about a sequence and not a timed sequence.
As said previously, the real abstract structure of a comics or a presentation is always a sequence that don't have any time representation. Still, it suggests time through graphic space and allow decomposition of action in a fine-grained way or in a more succint or declarative way.
To fully embrace the specificities of digitial sequences, their representation cannot be based on time. The sequence is divided in stages, with changes occuring between them, but no time is specified in the core structure.

However, time-based narration is still sometime interesting for creators, in particular on such virtually powerful digital platforms as computers. 
AOSL structure doesn't rely on time, but there are elements that can optionally rely on it: animated content, effects and scripts.

Animated content include videos or any kind of animation that, by definition, have a structure relying on time. Any kind of media can be inserted inside a sequence, so a creator can play a video in the middle of his sequence if he wants. The reader can stop their and watch the video or simply pass and continue into the sequence, as the sequence itself doesnt rely on the video to continue (this means that authors shouldn't rely on time-based narration when making a digital sequence).

Effects are modifiers applied to changes occuring between stages. For example, a fade is an effect that can be added to the spawn of an image, or to it's move in the canvas. A fade rely on time, but it can easily be skipped by players or readers and still keep the core of the story told intact.

Scripts are for extreme cases where the author wants to simply allow interactivity or other kind of time-based procedural animations. Scripts are only run inside a stage, so there can't be scripts between stages, keeping our original design decision intact.

=== 2.2. XML

AOSL is defined via an XSD file and assume that it's most common definition would be XML-based.
This allows:

 * *Inter-operability*: as the format itself is open an readable by any tool. Also, the fact that there are tons of libraries to read XML in any language allows any tool manipulating an XML file to be written in any programming language.
 * *Allow extendability easily*: it is easy to define extension points in XML-based formats and it is even easier to write extensions once the format is open to it.
 * *Strong Typing*: JSON, YAML and other alternatives have been considered, but none allow easy definition of types. They are more suited to formats that need to change in time, while AOSL is meant to be the inflexible squeleton on which tools would rely to build sequences, like HTML is fixed to allow generic description of documents.
 * *XSD*: There is no good and standard equivalent of xsd format in other alternative formats. Having an XSD file describing the format is an important bonus to allow generating code for tools or even just check sequence files validity.
 
=== 2.3. A Graph Of Changes

The initial reflex of any developer who tries to imagine a format to represent a sequence is to... represent a linear sequence in the description of the format. But, as several developer discovered by trying, this approach fails for digital media sequence. 

The problem lies in the inherent possibilities of the digital platforms. Computers can react, interract, change flow and directions depending on whatever variable the author did take into account. But most ot the time that author used a programming language to achieve the full power of the platform.
AOSL is meant to give this power back to the author of digital sequences, that most of the time don't have any programming skill.

To achieve this, *AOSL doesn't really describe a sequence. It describe a graph (as in mathematics) of "changes" that have to be applied between each stages. Another way to put this is: an AOSL file describe to it's interpreter how to genererate the sequence to be played.* AOSL doesn't declare where should be what at each stage. It starts from an initial canvas setup and modifies it between each stage.
The path taken by the reader in this graph (that can be linear or have branches and/or loops) is what generates the sequence she is reading.

As often when using a graph of changes to represent such a format (for example in decentralized source control softwares), it gives a lot of benefit on all sides:

 * *Branches & Loops - Turing Complete*: AOSL becomes turing-complete, this meaning that it have the same characteristics than a programming language, and thus have the almost the same potential for creativity. 
 * *Free the creator from linear stories*: some authors requested to give some freedom on the structure of the story, some wanting looping stories with variations, other wanting the reader to potentially take decisions (even if it is a dangerous idea, it should be used with great care). Using a graph of changes makes virtually limitless the kind of story structure that creators can try, good or bad.
 * *Analysis of story structure and canvas resources*: presented with both a graph of changes and a list of resources to use in a canvas, tools can easily analyze and optimize resource usage. Other technical benefits can be exploited by having such easily interpretabe structures.
 * *Side effects*: Another particularities of programs that are not exploited in narratives but could be in digital narration are (predictable) "side effects". Whatever that means, the creators are free to use scripting and other facilities associated to a story structure as graph to build something that have yet to be discovered.

=== 2.4. Extension Points

AOSL use the "open/closed" principle: it's core structure is fixed and should be taken as fixed by any tool reading an AOSL file. However, over the fixed sequence-based skeleton that AOSL provide, there are flexible layers allowing tools and players implementors to make the format exploit the specificities or their tools and players.

The extension points are:

 * *Effects*: effects are modifiers to changes. For example, a change can be the appearance (or activation) of an image (a sprite). An effect that could be applied to enhance storytelling would be a simple fade. Another example would be "sliding" of a graphic element that have been moved in a change. Audio and other kind of objects can also be affected by effects, depending on the effects.
 * *Extension*: some elements in the AOSL format provide an "extension" tag. Inside this tag, any information can be provided. It can be totally ignored by AOSL interpreters (tools or players) but it can also be used to give additional special data to a specific player or tool.
 * *Scripts*: scripts can be added to objects and stages. This complete the potential exendability of the format, as anything that cannot be just declared but have to be done in a generic way could be implemented by scripts, assuming the players can read the scripts.
 
=== 2.5. Media Agnostic

An AOSL file have a "library" that is a list of resource files to load to read the sequence. Those resources can be of any kind, even if clues can be given to the interpreter by specifying the kind of media it is. However, virtually any kind of media can be used inside a sequence.

The only limitation comes not from the AOSL format, but from the tools and players that interprets the sequence. If a player cannot display any .avi file, then it will not be able to correctly display the sequence. 
It is the role of tools to make sure that a sequence will use formats that are available on the target player.

AOSL only structure the pacing of the narration, it doesn't require nor limit the kind of media that can be used. That's why we talk about digital MEDIA sequences. 

=== 2.6. 3D Space

To make sure the graphic and audio representations can be manipulated freely and can be of any kind, AOSL use 3D space representations for everything that have a position.
This can complexify tool design if the 3D space is exploited by the authors, but it also generalize any of their use and allow simple transition to OpenGL (or WebGL, or...) implementations for example.

=== 2.7 Capability Based Adaptability

Not all interpreters/players are equal and can do the same things. For example, some will allow videos while others will not. 
